<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.dao.DeptMemberDao">

  <!--user_dept====>DeptMember-->
  <resultMap id="BaseResultMap" type="DeptMember">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="dir_id" jdbcType="INTEGER" property="dirId" />
    <result column="dept_id" jdbcType="INTEGER" property="deptId" />
  </resultMap>
  <!--user_dept====>Member-->
  <resultMap id="MemberResultMap" type="Member">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="username" jdbcType="VARCHAR" property="userName" />
    <result column="dept_name" jdbcType="VARCHAR" property="deptName" />
    <result column="user_phone" jdbcType="INTEGER" property="phone" />
    <result column="used_space" jdbcType="INTEGER" property="usedSpace" />
    <result column="max_space" jdbcType="INTEGER" property="maxSpace" />
    <result column="recent" jdbcType="TIMESTAMP" property="recent" />
    <result column="p_upload" jdbcType="INTEGER" property="pUpload" />
    <result column="p_down" jdbcType="INTEGER" property="pDown" />
    <result column="p_preview" jdbcType="INTEGER" property="pPreview" />
  </resultMap>



<!--根据id查询目录-部门表-->
  <sql id="Base_Column_List">
    id, dir_id, dept_id
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from dir_dept
    where id = #{id,jdbcType=INTEGER}
  </select>

  <!--查询部门成员-->
  <select id="selectListByDeptKey" parameterType="java.lang.Integer" resultMap="MemberResultMap">

        select t2.id,t1.username,t2.dept_name,t1.user_phone,t2.used_space,t2.max_space,t2.recent,t2.p_upload,t2.p_down,t2.p_preview
        from user_inf as t1 join
        (
        SELECT t3.id,t3.user_id,t3.dept_id,t4.dept_name,t3.used_space,t3.max_space,t3.recent,t3.p_upload,t3.p_down,t3.p_preview
		FROM user_dept as t3 join dept_inf as t4 on t3.dept_id = t4.dept_id
		)
		as t2 on t1.user_id = t2.user_id
        where dept_id = #{deptId,jdbcType=INTEGER}
  </select>

<!--根据id删除目录-部门表-->
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from dir_dept
    where id = #{id,jdbcType=INTEGER}
  </delete>

<!--插入一条记录-->
  <insert id="insert" parameterType="DeptMember">
    insert into dir_dept (id, dir_id, dept_id
      )
    values (#{id,jdbcType=INTEGER}, #{dirId,jdbcType=INTEGER}, #{deptId,jdbcType=INTEGER}
      )
  </insert>


<!--插入一条记录，且根据参数动态组装sql-->
  <insert id="insertSelective" parameterType="DeptMember">
    insert into dir_dept
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="dirId != null">
        dir_id,
      </if>
      <if test="deptId != null">
        dept_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="dirId != null">
        #{dirId,jdbcType=INTEGER},
      </if>
      <if test="deptId != null">
        #{deptId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>

<!--根据id更新记录，且根据参数动态组装sql-->
  <update id="updateByPrimaryKeySelective" parameterType="DeptMember">
    update dir_dept
    <set>
      <if test="dirId != null">
        dir_id = #{dirId,jdbcType=INTEGER},
      </if>
      <if test="deptId != null">
        dept_id = #{deptId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>

<!--根据id更新记录-->
  <update id="updateByPrimaryKey" parameterType="DeptMember">
    update dir_dept
    set dir_id = #{dirId,jdbcType=INTEGER},
      dept_id = #{deptId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>


</mapper>